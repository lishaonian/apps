// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"github.com/jinzhu/gorm"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stringx"
	"strings"
)

var (
	userInfoFieldNames          = builder.RawFieldNames(&UserInfo{})
	UserInfoRows                = strings.Join(userInfoFieldNames, ",")
	userInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(userInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(userInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	userInfoModel interface {
		Delete(ctx context.Context, id int64) int64
		FindOne(ctx context.Context, id int64) (UserInfo, error)
		TableName() string
	}

	defaultUserInfoModel struct {
		conn  *gorm.DB
		table string
		gorm.Model
	}

	UserInfo struct {
		Id   int64  `db:"id"`
		Name string `db:"name"`
		Age  int64  `db:"age"`
	}
	Page struct {
		PageNum  int `form:"pageNum"  json:"pageNum"  binding:"required,gt=0"`
		PageSize int `form:"pageSize" json:"pageSize" binding:"required,gt=0"`
	}
)

func newUserInfoModel(conn *gorm.DB) *defaultUserInfoModel {
	return &defaultUserInfoModel{
		conn:  conn,
		table: "user_info",
	}
}

func (m *defaultUserInfoModel) Delete(ctx context.Context, id int64) int64 {

	rows := m.conn.Delete(&UserInfo{}, id).RowsAffected
	return rows
}

func (m *defaultUserInfoModel) FindOne(ctx context.Context, id int64) (UserInfo, error) {
	var user UserInfo
	m.conn.Table("user_info").First(&user, id)
	fmt.Println(user)
	return user, nil
}

// RestPage 分页查询
// page  设置起始页、每页条数,
// name  查询目标表的名称
// query 查询条件,
// dest  查询结果绑定的结构体,
// bind  绑定表结构对应的结构体
func (m *defaultUserInfoModel) RestPage(page Page, query interface{}, dest interface{}, bind interface{}) int64 {
	offset := (page.PageNum - 1) * page.PageSize
	m.conn.Offset(offset).Limit(page.PageSize).Table(m.table).Where(query).Find(dest)
	return m.conn.Table(m.table).Where(query).Find(bind).RowsAffected
}
func (m *defaultUserInfoModel) TableName() string {
	return m.table
}
